resources:
  - name: image-bb-gitversion-tool
    type: docker-image
    source:
      repository: elbb/bb-gitversion
      tag: 0.6.2

  - name: image-aws-cli
    type: docker-image
    source:
      repository: amazon/aws-cli
      tag: 2.0.22

  - name: s3-gitversion
    type: s3
    source:
      bucket: ((name))
      endpoint: ((s3_endpoint))
      regexp: gitversion/gitversion-(.*).tar.gz
      access_key_id: ((s3_access_key))
      secret_access_key: ((s3_secret_key))
      disable_ssl: ((s3_skip_ssl_verification))

  - name: source
    type: git
    source:
      uri: ((git_source))
      # private key currently not needed because repo is public
      # private_key: ((privatekey))
      branch: ((git_branch))
      skip_ssl_verification: ((git_skip_ssl_verification))

  - name: image-torizon-builder
    type: docker-image
    source:
      repository: ((docker_registry))((docker_namespace))/torizon-builder
      username: ((registry_user))
      password: ((registry_password))
      insecure_registries: ["((docker_registry))"]

  - name: torizon-manifest
    type: git
    source:
      uri: ((torizon_git_source))
      branch: ((torizon_yocto_branch))
      paths: ['default.xml']    

  # Tar file to be placed on SDCard or http server
  - name: resource-boot-package
    type: s3
    source:
      bucket: ((name))
      regexp: ((torizon_yocto_machine))-((torizon_yocto_machine))-Tezi(.*).tar
      access_key_id: ((s3_access_key))
      secret_access_key: ((s3_secret_key))   
      endpoint: ((s3_endpoint))
      disable_ssl: ((s3_skip_ssl_verification))


jobs:
  - name: generate-gitversion-and-put-it-on-s3
    public: true
    plan:
      - in_parallel:
          - get: image-bb-gitversion-tool
          - get: source
            trigger: true
          - get: image-aws-cli
      - task: generate-version
        image: image-bb-gitversion-tool
        config:
          platform: linux
          inputs:
            - name: source
          outputs:
            - name: gitversion
          run:
            path: /bin/bash
            args:
              - -exc
              - |
                entrypoint.sh && 
                jq empty gitversion/json/gitversion.json &&
                cat gitversion/json/gitversion.json &&
                tar cvfz gitversion/gitversion-$(cat gitversion/plain/BranchVersion).tar.gz gitversion/*
          params:
            GIT_PATH: source
            GEN_PATH: gitversion
      - task: check-or-create-bucket-for-((name))-on-s3
        image: image-aws-cli
        config:
          platform: linux
          run:
            path: /bin/bash
            args:
              - -xc
              - |
                mkdir -p ~/.aws
                # hide setting credentials in plain text in concourse ui
                set +x
                export TERM="xterm-256color"
                echo "[default]" > ~/.aws/credentials
                echo "aws_access_key_id=((s3_access_key))" >> ~/.aws/credentials
                echo "aws_secret_access_key=((s3_secret_key))" >> ~/.aws/credentials
                set -x
                # check if bucket exists on s3 endpoint. If not create one
                aws --endpoint-url ((s3_endpoint)) s3api head-bucket --bucket ((name)) 2> /dev/null
                if [ $? != 0 ]; then aws s3 mb s3://((name)) --endpoint-url ((s3_endpoint)); fi
      - put: s3-gitversion
        params:
          file: gitversion/gitversion-*.tar.gz
          acl: public-read

  - name: create-docker-image-for-torizon-builder-and-push-it
    public: true
    plan:
      - in_parallel:
          - get: source
          - get: s3-gitversion
            passed: [generate-gitversion-and-put-it-on-s3]
            trigger: true
            params:
              unpack: true
      - put: image-torizon-builder
        params:
          build: source/torizon-builder/docker/
          dockerfile: source/torizon-builder/docker/Dockerfile
          tag_as_latest: ((release_as_latest))
          tag_file: s3-gitversion/gitversion/plain/BranchVersion

  - name: build-torizon
    plan:
      - get: image-torizon-builder
        trigger: true
      - get: torizon-manifest
        # The repo is checked as a trigger, but the git pull happens within the container in the task
        # so the task has no "input"
        trigger: true

      - task: build-torizon
        image: image-torizon-builder
        config:
          platform: linux
          outputs:
            - name: workdir-torizon
          run:
            path: /bin/bash
            args:
              - -exc
              - |
                entrypoint.sh /usr/local/bin/prepare_and_build.sh
  
          params:
            USERID: 9001
            BRANCH: ((torizon_yocto_branch))
            MACHINE: ((torizon_yocto_machine))
            WORK_DIR: workdir-torizon
            BUILD_DIR: build-torizon
            DISTRIBUTION: torizon
            TARGET: ((torizon_yocto_target))
            MANIFEST_REPO: ((torizon_git_source))
        
      - put: resource-boot-package
        params:
          file: workdir-torizon/torizon/build-torizon/deploy/images/((torizon_yocto_machine))/((torizon_yocto_target))-((torizon_yocto_machine))-Tezi*.tar
          acl: public-read

